{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["characterMap","Object","assign","あ","い","う","え","お","か","き","く","け","こ","さ","し","す","せ","そ","た","ち","つ","て","と","な","に","ぬ","ね","の","は","ひ","ふ","へ","ほ","ま","み","む","め","も","や","ゆ","よ","ら","り","る","れ","ろ","わ","を","ん","ア","イ","ウ","エ","オ","カ","キ","ク","ケ","コ","サ","シ","ス","セ","ソ","タ","チ","ツ","テ","ト","ナ","ニ","ヌ","ネ","ノ","ハ","ヒ","フ","ヘ","ホ","マ","ミ","ム","メ","モ","ヤ","ユ","ヨ","ラ","リ","ル","レ","ロ","ワ","ヲ","ン","groups","name","group","concat","shuffle","a","i","length","j","Math","floor","random","_ref","Character","props","react_default","createElement","className","kana","SelectGroups","_this","this","groupElement","map","key","type","checked","selected","has","onChange","handleCheck","item","App_Character","_this2","_ref2","target","select","unselect","Component","Guess","_this3","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onTextChange","bind","assertThisInitialized","state","startedAt","Date","now","current","currentGuess","done","shuffledList","characters","slice","_this4","_ref3","roman","value","toLowerCase","isSubstr","substr","isRoman","setState","objectSpread","fetch","method","headers","Content-Type","body","JSON","stringify","guessedAt","expectedCharacter","guessedCharacter","selectedGroups","next","setTimeout","doneField","expectedGuess","App","_this5","Set","started","start","toConsumableArray","reduce","prev","init","App_Guess","getCharacters","App_SelectGroups","disabled","size","onClick","newSelected","add","filter","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a13e47d8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n/**\n * The reference: https://www.learn-japanese-adventure.com/hiragana-chart.html\n */\n\nconst hiraganaCharacterMap = {\"あ\":\"a\",\"い\":\"i\",\"う\":\"u\",\"え\":\"e\",\"お\":\"o\",\"か\":\"ka\",\"き\":\"ki\",\"く\":\"ku\",\"け\":\"ke\",\"こ\":\"ko\",\"さ\":\"sa\",\"し\":\"shi\",\"す\":\"su\",\"せ\":\"se\",\"そ\":\"so\",\"た\":\"ta\",\"ち\":\"chi\",\"つ\":\"tsu\",\"て\":\"te\",\"と\":\"to\",\"な\":\"na\",\"に\":\"ni\",\"ぬ\":\"nu\",\"ね\":\"ne\",\"の\":\"no\",\"は\":\"ha\",\"ひ\":\"hi\",\"ふ\":\"fu\",\"へ\":\"he\",\"ほ\":\"ho\",\"ま\":\"ma\",\"み\":\"mi\",\"む\":\"mu\",\"め\":\"me\",\"も\":\"mo\",\"や\":\"ya\",\"ゆ\":\"yu\",\"よ\":\"yo\",\"ら\":\"ra\",\"り\":\"ri\",\"る\":\"ru\",\"れ\":\"re\",\"ろ\":\"ro\",\"わ\":\"wa\",\"を\":\"wo\",\"ん\":\"n\"};\nconst katakanaCharacterMap = {\"ア\":\"a\",\"イ\":\"i\",\"ウ\":\"u\",\"エ\":\"e\",\"オ\":\"o\",\"カ\":\"ka\",\"キ\":\"ki\",\"ク\":\"ku\",\"ケ\":\"ke\",\"コ\":\"ko\",\"サ\":\"sa\",\"シ\":\"shi\",\"ス\":\"su\",\"セ\":\"se\",\"ソ\":\"so\",\"タ\":\"ta\",\"チ\":\"chi\",\"ツ\":\"tsu\",\"テ\":\"te\",\"ト\":\"to\",\"ナ\":\"na\",\"ニ\":\"ni\",\"ヌ\":\"nu\",\"ネ\":\"ne\",\"ノ\":\"no\",\"ハ\":\"ha\",\"ヒ\":\"hi\",\"フ\":\"fu\",\"ヘ\":\"he\",\"ホ\":\"ho\",\"マ\":\"ma\",\"ミ\":\"mi\",\"ム\":\"mu\",\"メ\":\"me\",\"モ\":\"mo\",\"ヤ\":\"ya\",\"ユ\":\"yu\",\"ヨ\":\"yo\",\"ラ\":\"ra\",\"リ\":\"ri\",\"ル\":\"ru\",\"レ\":\"re\",\"ロ\":\"ro\",\"ワ\":\"wa\",\"ヲ\":\"wo\",\"ン\":\"n\"};\nconst characterMap = Object.assign({}, hiraganaCharacterMap, katakanaCharacterMap);\n\nconst hiraganaGroups = [\n  {\n    \"name\":\"vowels\",\n    \"group\":[\"あ\",\"い\",\"う\",\"え\",\"お\"]\n  },\n  {\n    \"name\":\"k-line\",\n    \"group\":[\"か\",\"き\",\"く\",\"け\",\"こ\"]\n  },\n  {\n    \"name\":\"s-line\",\n    \"group\":[\"さ\",\"し\",\"す\",\"せ\",\"そ\"]\n  },\n  {\n    \"name\":\"t-line\",\n    \"group\":[\"た\",\"ち\",\"つ\",\"て\",\"と\"]\n  },\n  {\n    \"name\":\"n-line\",\n    \"group\":[\"な\",\"に\",\"ぬ\",\"ね\",\"の\"]\n  },\n  {\n    \"name\":\"h-line\",\n    \"group\":[\"は\",\"ひ\",\"ふ\",\"へ\",\"ほ\"]\n  },\n  {\n    \"name\":\"m-line\",\n    \"group\":[\"ま\",\"み\",\"む\",\"め\",\"も\"]\n  },\n  {\n    \"name\":\"y-line\",\n    \"group\":[\"や\",\"ゆ\",\"よ\"]\n  },\n  {\n    \"name\":\"r-line\",\n    \"group\":[\"ら\",\"り\",\"る\",\"れ\",\"ろ\"]\n  },\n  {\n    \"name\":\"w-line\",\n    \"group\":[\"わ\",\"を\"]\n  },\n  {\n    \"name\":\"n\",\n    \"group\":[\"ん\"]\n  }\n];\n\nconst katakanaGroups = [\n  {\n    \"name\":\"vowels\",\n    \"group\":[\"ア\",\"イ\",\"ウ\",\"エ\",\"オ\"]\n  },\n  {\n    \"name\":\"k-line\",\n    \"group\":[\"カ\",\"キ\",\"ク\",\"ケ\",\"コ\"]\n  },\n  {\n    \"name\":\"s-line\",\n    \"group\":[\"サ\",\"シ\",\"ス\",\"セ\",\"ソ\"]\n  },\n  {\n    \"name\":\"t-line\",\n    \"group\":[\"タ\",\"チ\",\"ツ\",\"テ\",\"ト\"]\n  },\n  {\n    \"name\":\"n-line\",\n    \"group\":[\"ナ\",\"ニ\",\"ヌ\",\"ネ\",\"ノ\"]\n  },\n  {\n    \"name\":\"h-line\",\n    \"group\":[\"ハ\",\"ヒ\",\"フ\",\"ヘ\",\"ホ\"]\n  },\n  {\n    \"name\":\"m-line\",\n    \"group\":[\"マ\",\"ミ\",\"ム\",\"メ\",\"モ\"]\n  },\n  {\n    \"name\":\"y-line\",\n    \"group\":[\"ヤ\",\"ユ\",\"ヨ\"]\n  },\n  {\n    \"name\":\"r-line\",\n    \"group\":[\"ラ\",\"リ\",\"ル\",\"レ\",\"ロ\"]\n  },\n  {\n    \"name\":\"w-line\",\n    \"group\":[\"ワ\",\"ヲ\"]\n  },\n  {\n    \"name\":\"\",\n    \"group\":[\"ン\"]\n  }\n];\n\nconst groups = hiraganaGroups.concat(katakanaGroups);\n\n/**\n * https://stackoverflow.com/questions/6274339/how-can-i-shuffle-an-array\n */\nconst shuffle = (a) => {\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n};\n\nconst Character = props => (\n  <div className=\"character\">\n    <div className=\"kana\">{props.kana}</div>\n    <div className=\"roman\">{characterMap[props.kana]}</div>\n  </div>\n);\n\nclass SelectGroups extends Component {\n\trender() {\n\t\tconst groupElement = groups\n\t\t\t.map((group, i) => (\n\t\t\t\t<div className=\"group\" key={i}>\n\t\t\t\t\t<input className=\"select\" type=\"checkbox\" checked={ this.props.selected.has(i) } onChange={ this.handleCheck(i) }/>\n\t\t\t\t\t<div className=\"name\">{group.name}</div>\n\t\t\t\t\t<div className=\"characters\">\n\t\t\t\t\t\t{ group.group.map((item) => <Character kana={item} key={characterMap[item]} />) }\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t));\n\t\treturn (\n\t\t\t<div>\n\t\t\t  <h1>Selection</h1>\n\t\t\t  <div className=\"select-groups\">\n\t\t\t  \t{ groupElement }\n\t\t\t  </div>\n\t\t\t</div>\n\t\t);\n\t}\n\n  handleCheck(i) {\n    return ({target}) => {\n      if (target.checked) {\n        this.props.select(i);\n      } else {\n        this.props.unselect(i);\n      }\n    };\n  }\n};\n\nclass Guess extends Component {\n  constructor(props) {\n    super(props);\n    this.onTextChange = this.onTextChange.bind(this);\n    this.state = { \n      startedAt: Date.now(),\n      current: '',\n      currentGuess: '', \n      done: false,\n      shuffledList: shuffle(props.characters.slice()),\n    };\n    this.state.current = this.state.shuffledList[0];\n    this.state.shuffledList = this.state.shuffledList.slice(1);\n  }\n\n  onTextChange({target}) {\n    if (this.state.done) {\n      return;\n    }\n\n    const roman = characterMap[this.state.current];\n    target.value = target.value.toLowerCase();\n\n    const isSubstr = roman.substr(0, target.value.length) === target.value;\n    const isRoman = roman === target.value;\n\n    if (!isSubstr || isRoman) {\n      this.setState({\n        ...this.state,\n        currentGuess: target.value,\n        done: true,\n      });\n\n      fetch('/api/guess', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          startedAt: this.state.startedAt,\n          guessedAt: Date.now(),\n          expectedCharacter: roman,\n          guessedCharacter: target.value,\n          selectedGroups: this.props.selectedGroups,\n        }),\n      });\n      \n      const next = () => {\n        var shuffledList = this.state.shuffledList;\n        if (shuffledList.length === 0) {\n          shuffledList = shuffle(this.props.characters.slice());\n        }\n\n        this.setState({\n          ...this.state,\n          current: shuffledList[0],\n          currentGuess: '',\n          done: false,\n          startedAt: Date.now(),\n          shuffledList: shuffledList.slice(1),\n        });\n      };\n      if (isRoman) {\n        next();\n      } else {\n        setTimeout(next, 2000);\n      }\n    } else {\n      this.setState({\n        ...this.state,\n        currentGuess: target.value,\n        startedAt: ((Date.now() - this.state.startedAt)/1000.0) >= 60 ? Date.now() : this.state.startedAt,\n      });\n    }\n  }\n\n  render() {\n    var doneField;\n    const expectedGuess = characterMap[this.state.current];\n    if (this.state.currentGuess === expectedGuess) {\n      doneField = <div className={`correct ${this.state.done ? '' : 'invisible'}`}>Correct!</div>;\n    } else {\n      doneField = <div className={`incorrect ${this.state.done ? '' : 'invisible'}`}>The correct answer is {expectedGuess}</div>;\n    }\n    return (\n      <div className=\"guess\">\n        <div className=\"toGuess\">{this.state.current}</div>\n        <div className=\"done-placeholder\">{doneField}</div>\n        <input type=\"text\" onChange={this.onTextChange} value={this.state.currentGuess} />\n      </div>\n    );\n  }\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = { selected: new Set(), started: false };\n    this.select = this.select.bind(this);\n    this.unselect = this.unselect.bind(this);\n    this.start = this.start.bind(this);\n  }\n\n  getCharacters(selected) {\n    return [...selected]\n      .map((i) => groups[i].group)\n      .reduce((prev, init) => prev.concat(init), []);\n  }\n\n  render() {\n    if (this.state.started) {\n      return (<Guess characters={this.getCharacters(this.state.selected)} selectedGroups={[...this.state.selected]} />);\n    }\n    return (\n      <div className=\"app\">\n\t\t\t  <SelectGroups select={this.select} unselect={this.unselect} selected={this.state.selected}/>\n        <div>Number selected: { this.getCharacters(this.state.selected).length }</div>\n        <button disabled={this.state.selected.size === 0} onClick={this.start}>Start</button>\n      </div>\n    );\n  }\n\n  select(i) {\n    var newSelected = new Set([...this.state.selected]);\n    newSelected.add(i);\n    this.setState({\n      ...this.state,\n      selected: newSelected,\n    });\n  }\n\n  unselect(i) {\n    this.setState({\n      ...this.state,\n      selected: new Set([...this.state.selected].filter((item) => item !== i)),\n    });\n  }\n\n  start() {\n    this.setState({\n      ...this.state,\n      started: true,\n    });\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}